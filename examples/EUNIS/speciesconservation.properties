#
# The prefix for all rdf:abouts and rdf:resources to make them into URLs. Follows xml:base rules.
# It is recommended to end the string with '/'
#
baseurl = http://rdfdata.eionet.europa.eu/eunis/

#
# Vocabulary is added as the empty namespace the rdf:RDF element
#
vocabulary=http://eunis.eea.europa.eu/rdf/schema.rdf#

#
# The list of tables for which you have queries. Separated by whitespace.
#
tables = references countries infoquality trend speciesstatus populationunit speciesconservation

#
# Some of the columns of the queries will contain references to other
# objects rather than literal values. The following configuration 
# specifies, which columns are references to objects of which type.
# It can also be specified directly in the query.
# The right hand side can be a table name or the empty string.
#
objectproperty.hasReference= references
objectproperty.hasInfoQuality= infoquality
objectproperty.hasTrend= trend
objectproperty.hasUnit= populationunit
objectproperty.hasStatus= speciesstatus
#objectproperty.hasBioGeoRegion = http://eunis.eea.europa.eu/geoscope
objectproperty.hasBioGeoRegion= http://rdfdata.eionet.europa.eu/eea/biogeographic-regions
objectproperty.forCountry = countries
objectproperty.forSpecies = http://eunis.eea.europa.eu/species
objectproperty.forHabitat = http://eunis.eea.europa.eu/habitats

references.class = bibo:Document
references.query = SELECT ID_DC AS id, \
        title AS 'dcterms:title', \
        alternative AS 'dcterms:alternative', \
        source AS 'dcterms:creator', \
        editor AS 'dcterms:contributor', \
        CONCAT('http://eunis.eea.europa.eu/references/', CONVERT(ID_DC USING utf8)) AS 'owl:sameAs->', \
        created AS 'dcterms:date^^xsd:date', \
        publisher AS 'dcterms:publisher' \
        FROM dc_index \
        WHERE ID_DC IN ( 1570, 1850, 1851 )

#
# COUNTRIES
#
countries.class = rdf:Description
countries.query1 = SELECT eunis_area_code AS id, \
        eunis_area_code AS eunisAreaCode, \
        area_name_en AS 'rdfs:label', \
        IF(eunis_area_code IS NULL OR ISO_3_WCMC<>ISO_3_WCMC_PARENT OR iso_2l IS NULL OR selection = 0, \
             NULL, CONCAT('http://rdfdata.eionet.europa.eu/eea/countries/',eunis_area_code)) AS 'owl:sameAs->' \
        FROM chm62edt_country WHERE selection = 1 OR eunis_area_code IN ('GL')

# Lookup table
infoquality.query = SELECT ID_INFO_QUALITY AS id, \
        status, \
        description AS 'rdfs:label' \
        FROM chm62edt_info_quality

# Lookup table
trend.query = SELECT ID_TREND AS id, \
        status, \
        description AS 'rdfs:label' \
        FROM chm62edt_trend

# Lookup table
speciesstatus.query = SELECT ID_SPECIES_STATUS AS id, \
        status_code, \
        short_definition, \
        description AS 'rdfs:label' \
        FROM chm62edt_species_status

# Lookup table
populationunit.query = SELECT ID_POPULATION_UNIT AS id, \
        NAME AS 'rdfs:label' \
        FROM chm62edt_population_unit

# The purpose is to take out the population figures from EUNIS and make them available as Linked Data reports.
# Then we can more flexibly integrate more data. When BirdLife #3 comes out, they can store the data locally and we can fetch it.
#
# SPECIES POPULATIONS (ID_DC = 1850 and ID_DC=1570)
# 1570: Birds in Europe Their Conservation Status #1 - 1994
#

# Main records
speciesconservation.class = rdf:Description
speciesconservation.query1 = SELECT CRC32(CONCAT(CONVERT(R.ID_NATURE_OBJECT USING utf8), \
			    CONVERT(R.ID_GEOSCOPE USING utf8), \
			    CONVERT(R.ID_GEOSCOPE_LINK USING utf8), \
			    CONVERT(R.ID_REPORT_TYPE USING utf8))) AS id, \
        ID_SPECIES AS forSpecies, \
        chm62edt_country.EUNIS_AREA_CODE AS forCountry, \
	RIGHT(chm62edt_biogeoregion.CODE_EEA,3) AS hasBioGeoRegion, \
        R.ID_DC AS 'dcterms:source->references' \
        FROM chm62edt_reports AS R \
        JOIN chm62edt_report_type USING(ID_REPORT_TYPE) \
        JOIN chm62edt_species USING(ID_NATURE_OBJECT) \
	JOIN chm62edt_biogeoregion ON R.ID_GEOSCOPE_LINK=chm62edt_biogeoregion.ID_GEOSCOPE \
	JOIN chm62edt_country ON R.ID_GEOSCOPE=chm62edt_country.ID_GEOSCOPE \
        WHERE LOOKUP_TYPE IN ("TREND", "POPULATION_UNIT")

# Population attributes
speciesconservation.attributetable1 = SELECT CRC32(CONCAT(CONVERT(R.ID_NATURE_OBJECT USING utf8), \
				    CONVERT(R.ID_GEOSCOPE USING utf8), \
				    CONVERT(R.ID_GEOSCOPE_LINK USING utf8), \
				    CONVERT(R.ID_REPORT_TYPE USING utf8))) AS id, \
        LOWER(chm62edt_report_attributes.NAME), \
        value, \
        IF (TYPE='NUMBER' AND VALUE != 'Present', 'xsd:integer', ''), \
        '' \
        FROM chm62edt_reports AS R \
        JOIN chm62edt_report_type USING (ID_REPORT_TYPE) \
        JOIN chm62edt_population_unit ON ID_POPULATION_UNIT=ID_LOOKUP \
        JOIN chm62edt_report_attributes USING (ID_REPORT_ATTRIBUTES) \
        WHERE LOOKUP_TYPE = "POPULATION_UNIT"


# INFO Quality
speciesconservation.query2 = SELECT CRC32(CONCAT(CONVERT(R.ID_NATURE_OBJECT USING utf8), \
				    CONVERT(R.ID_GEOSCOPE USING utf8), \
				    CONVERT(R.ID_GEOSCOPE_LINK USING utf8), \
				    CONVERT(R.ID_REPORT_TYPE USING utf8))) AS id, \
        ID_LOOKUP AS hasInfoQuality \
        FROM chm62edt_reports AS R \
        JOIN chm62edt_report_type USING(ID_REPORT_TYPE) \
        WHERE LOOKUP_TYPE="INFO_QUALITY"

# Trend type and trend reference in ID_LOOKUP
speciesconservation.query3 = SELECT CRC32(CONCAT(CONVERT(R.ID_NATURE_OBJECT USING utf8), \
				    CONVERT(R.ID_GEOSCOPE USING utf8), \
				    CONVERT(R.ID_GEOSCOPE_LINK USING utf8), \
				    CONVERT(R.ID_REPORT_TYPE USING utf8))) AS id, \
        ID_LOOKUP AS hasTrend, \
        'http://eunis.eea.europa.eu/rdf/schema.rdf#ConservationTrend' AS 'rdf:type->' \
        FROM chm62edt_reports AS R \
        JOIN chm62edt_report_type USING(ID_REPORT_TYPE) \
        WHERE LOOKUP_TYPE="TREND"

# Trend attributes. Only year is in the field, so even though it says date, we use xsd:integer
speciesconservation.attributetable2 = SELECT CRC32(CONCAT(CONVERT(R.ID_NATURE_OBJECT USING utf8), \
				    CONVERT(R.ID_GEOSCOPE USING utf8), \
				    CONVERT(R.ID_GEOSCOPE_LINK USING utf8), \
				    CONVERT(R.ID_REPORT_TYPE USING utf8))) AS id, \
        LOWER(chm62edt_report_attributes.NAME), \
        value, \
        IF (TYPE='DATE', 'xsd:integer', ''), \
        '' \
        FROM chm62edt_reports AS R \
        JOIN chm62edt_report_type USING (ID_REPORT_TYPE) \
        JOIN chm62edt_report_attributes USING (ID_REPORT_ATTRIBUTES) \
        WHERE LOOKUP_TYPE = "TREND"

# Conservation status type and population unit derived from ID_LOOKUP
speciesconservation.query4 = SELECT CRC32(CONCAT(CONVERT(R.ID_NATURE_OBJECT USING utf8), \
				    CONVERT(R.ID_GEOSCOPE USING utf8), \
				    CONVERT(R.ID_GEOSCOPE_LINK USING utf8), \
				    CONVERT(R.ID_REPORT_TYPE USING utf8))) AS id, \
        chm62edt_population_unit.NAME AS unit, \
        'http://eunis.eea.europa.eu/rdf/schema.rdf#ConservationStatus' AS 'rdf:type->' \
        FROM chm62edt_reports AS R \
        JOIN chm62edt_report_type USING(ID_REPORT_TYPE) \
        JOIN chm62edt_population_unit ON ID_POPULATION_UNIT=ID_LOOKUP \
        WHERE LOOKUP_TYPE="POPULATION_UNIT"

# Species status
speciesconservation.query5 = SELECT CRC32(CONCAT(CONVERT(R.ID_NATURE_OBJECT USING utf8), \
				    CONVERT(R.ID_GEOSCOPE USING utf8), \
				    CONVERT(R.ID_GEOSCOPE_LINK USING utf8), \
				    CONVERT(R.ID_REPORT_TYPE USING utf8))) AS id, \
        ID_LOOKUP AS hasStatus \
        FROM chm62edt_reports AS R \
        JOIN chm62edt_report_type USING(ID_REPORT_TYPE) \
        WHERE LOOKUP_TYPE="SPECIES_STATUS"


#
# These namespaces are automatically added to the rdf:RDF element
#
xmlns.rdf = http://www.w3.org/1999/02/22-rdf-syntax-ns#
xmlns.rdfs = http://www.w3.org/2000/01/rdf-schema#
xmlns.geo = http://www.w3.org/2003/01/geo/wgs84_pos#
xmlns.bibo: http://purl.org/ontology/bibo/
xmlns.owl = http://www.w3.org/2002/07/owl#
xmlns.foaf = http://xmlns.com/foaf/0.1/
xmlns.sioc = http://rdfs.org/sioc/ns#
xmlns.dwc = http://rs.tdwg.org/dwc/terms/
xmlns.dc = http://purl.org/dc/elements/1.1/
xmlns.dcterms = http://purl.org/dc/terms/
xmlns.skos = http://www.w3.org/2004/02/skos/core#
xmlns.xsd = http://www.w3.org/2001/XMLSchema#
xmlns.cc = http://creativecommons.org/ns#

datatype.varchar =
datatype.char =
datatype.nvarchar =
datatype.int = xsd:integer
datatype.datetime = xsd:dateTime
datatype.decimal = xsd:decimal
datatype.float = xsd:decimal
datatype.real = xsd:decimal
